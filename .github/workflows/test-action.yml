# Run Unit tests on push
name:
  Test calc functions
#event trigger
on:
  push:
    branches: [main,dev]

#single job
jobs:
  test:
    # Run the job on the latest version of Ubuntu hosted by gitHub
    runs-on: ubuntu-latest
    steps:
      #Step 1:print trigger event name using github context
      - name: Trigger event
        run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      #Step2: print runner os using runner context
      - name: Runner OS
        run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      #Step 3: print current branch github context
      - name : Current branch name
        run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      #Step 2: Checkout code from repository github context
      - name: Checkout repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      #Step 3: Set up python environment
      - name: Set up Python
        # This is the version of the action for setting up Python, not the Python version.
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      #Step 4: Install Dependencies
      - name: Install python dependencies
        #| allows you to execute four distinct shell commands all within one step.
        run: |
          #Upgrade pip and install a test runner (like pytest)
          python -m pip install --upgrade pip
          pip install pytest
          
          #Check if requirements file exists and install dependencies from it
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
      #Step 5: Run Unit test and save results to JUnit format
      - name: Run tests
        run: |
          mkdir -p test-result
          pytest test.py --junitxml=test-result/report.xml
      #Step 6:upload pytest result artifact
      - name: Upload pytest result artifact
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: test-result/report.xml
          retention-days: 1
  #job 2
  read-result:
    # Ensure this job only runs AFTER the 'test' job succeeds
    needs: test
    runs-on: ubuntu-latest
    steps:
      #Step1
      - name: Download pytest results artifact
        uses: actions/download-artifact@v4
        with:
          name: pytest-results
          path: downloaded-results

     #Step2:
      - name: Display artifact content
        run: |
          echo "Test results downloaded successfully:"
          # Use 'cat' to print the content of the XML report file to the job log
          cat downloaded-results/report.xml
          





